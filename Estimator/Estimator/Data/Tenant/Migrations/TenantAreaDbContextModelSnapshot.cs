// <auto-generated />
using Estimator.Data.Tenant;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Estimator.Data.Tenant.Migrations
{
    [DbContext(typeof(TenantAreaDbContext))]
    partial class TenantAreaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Estimator.Data.Entities.FootingPriceAndSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IncludeDescriptionInProposal")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LabourCost")
                        .HasColumnType("TEXT");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("FootingPriceAndSizes", (string)null);
                });

            modelBuilder.Entity("Estimator.Data.Entities.MetricReinforcingPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PerEach")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerEachInstall")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerFootInstall")
                        .HasColumnType("TEXT");

                    b.Property<int>("RebarSizeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RebarTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MetricReinforcingPrices", (string)null);
                });

            modelBuilder.Entity("Estimator.Data.Entities.PadPriceAndSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<bool>("IncludeDescriptionInProposal")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LabourPerEach")
                        .HasColumnType("TEXT");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("PadPriceAndSizes", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
